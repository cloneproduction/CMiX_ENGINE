//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 
SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=WRAP;AddressV=WRAP;};

Texture2DArray texture2d : PREVIOUS;
Texture2DArray texArray;
int texcount = 6;
StructuredBuffer<float4x4> tTex;

#include "ColorSpace.fxh"
#define bld(op,c0,c1) float4(lerp((c0*c0.a+c1*c1.a*(1-c0.a))/saturate(c0.a+c1.a*(1-c0.a))  ,(op)  ,c0.a*c1.a).rgb,  saturate(c0.a+c1.a*(1-c0.a)))


float2 TexCoord (float2 x, float4x4 tTex){
	float2 x0=mul(float4((x.xy*2-1)*float2(1,-1)*.5,0,1),tTex).xy*float2(1,-1)+0.5;	
	return x0;
}

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 pBlender(float4 PosWVP: SV_POSITION, float2 uv: TEXCOORD0): SV_Target
{
		float4 color = float4(0.0, 0.0, 0.0, 1.0);
		for(int i = texcount-1; i>=0; i--)
		{
			float4 col1 = texture2d.Sample(s0, float3(TexCoord(uv, tTex[i]), i));
			float4 col2 = texArray.Sample(s0, float3(TexCoord(uv, tTex[i]), i));
			color = bld(col1,col1,col2);
			color.a
		}
	return color;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,pBlender()));
	}
}



